import numpy as np

def rician_adaptation(arr, sigma):

	'''
	Corrects the estimate of the Local PCA algorithm to
	adapt to the rician noise framework

	Reference
	---------
	Diffusion Weighted Image Denoising Using Overcomplete Local PCA
	Manjón JV, Coupé P, Concha L, Buades A, Collins DL

	Parameters
	----------
	arr: 4D array
		this arr is the estimate of the local PCA algorithm
	sigma : 4D array
		the local noise variance estimate
	Returns
	-------

	corrected_arr: 4D array 
				same size as arr with the rician correction
	'''

	# load a lookup table
	# add this in main path 
	eta_phi = np.genfromtxt('../data/lut.csv')
	# as the lookup table was generated by keeping phi values as
	# phi = linspace(0,25,10000)
	# the index of the eta table is 
	# index = floor(phi*10000/25) = floor(phi*400)
	# for each x/sigma compute eta(x/sigma) from the lut
	
	phi = arr / sigma
	corrected_arr = sigma * eta_phi[np.floor(phi * 400).astype(np.int64)]

	return corrected_arr
