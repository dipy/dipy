#! /usr/bin/env python
import os

from dipy.workflows.segment import median_otsu_bet
from dipy.workflows.reconst import compute_dti_metrics
from dipy.workflows.fodf import compute_fodf
from dipy.workflows.tracking import track_peaks_deterministic
from dipy.workflows.tract_metrics import tract_density
from dipy.fixes import argparse as arg

parser = arg.ArgumentParser()
parser.add_argument('input', action='store')

parser.add_argument('bvals', action='store', metavar='bvals',
                    help='Path of the bvals file, in FSL format.')

parser.add_argument('bvecs', action='store', metavar='bvecs',
                    help='Path of the bvecs file, in FSL format.')

if __name__ == "__main__":
    params = parser.parse_args()
    input_dir = os.path.dirname(params.input)
    fname, ext = os.path.splitext(os.path.basename(params.input))

    if fname.endswith('.nii'):
        fname, _ = os.path.splitext(fname)
        ext = '.nii.gz'

    work_dir = os.path.join(input_dir, 'work')
    median_otsu_bet(params.input, 'work', True, 4, 4)

    # Fix this?
    mask_fname = fname + '_mask' + ext
    mask_path = os.path.join(work_dir, mask_fname)

    metrics_dir = os.path.join(work_dir, 'metrics')
    compute_dti_metrics(params.input, mask_path, params.bvals, params.bvecs,
                        'work/metrics/', 'tensor.nii.gz', 'fa.nii.gz', 'ga.nii.gz',
                        'rgb.nii.gz', 'md.nii.gz', 'ad.nii.gz', 'rd.nii.gz',
                        'mode.nii.gz', 'tensor_evecs.nii.gz',
                        'tensor_evals.nii.gz')

    compute_fodf(params.input, mask_path, params.bvals, params.bvecs,
                 'work/metrics/')

    track_peaks_deterministic(os.path.join(metrics_dir, 'fa.nii.gz'),
                              os.path.join(metrics_dir, 'peaks_values.nii.gz'),
                              os.path.join(metrics_dir, 'peaks_indices.nii.gz'))

    tract_density(os.path.join(metrics_dir, 'tractogram.trk'),
                  os.path.join(metrics_dir, 'fa.nii.gz'))
